import{mergeObject}from"../../common/utils/helpers.mjs";export default class ProgressEmitter{constructor(t,o,s,e={},i={}){this.#t=t,this.#o=o,this.#s=s,this.#e=e,this.#i=mergeObject({log:!0,decimalPlaces:0},i)}#t;#o;#s;#e;#i;#n;complete({event:t="progress",context:o={},log:s,step:e}={}){const{express:i,logger:n}=global,{log:c,onProgress:r}=this.#i,{STEPS:a}=CONST.SETUP_PACKAGE_PROGRESS;e??=a.COMPLETE;const l={...this.#e,...o,step:e,pct:100,action:this.#t};r instanceof Function&&r(l),c&&n.info(s??`${this.#t} ${e} - 100%`),i.io.emit(t,l)}emit(t,{event:o="progress",force:s=!1,log:e,context:i={}}={}){const{express:n,logger:c}=global,{log:r,decimalPlaces:a,onProgress:l}=this.#i,g=Math.min(Number((t/this.#s*100).toFixed(a)),100),p=g!==this.#n,h={...this.#e,...i,pct:g,hasChanged:p,action:this.#t,step:this.#o};if(l instanceof Function&&l(h),s||p){if(r){const t=e??`${this.#t} ${this.#o} progress`;c.info(`${t} - ${g}%`)}n.io.emit(o,h),this.#n=g}}error(t,{event:o="progress",context:s={}}={}){const{express:e,logger:i}=global,{log:n,onProgress:c}=this.#i,{STEPS:r}=CONST.SETUP_PACKAGE_PROGRESS,a={...this.#e,...s,pct:100,action:this.#t,step:r.ERROR,error:t.message,stack:t.stack};c instanceof Function&&c(a),n&&i.error(t),e.io.emit(o,a)}}