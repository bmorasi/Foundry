{"version":3,"file":"foundryvtt-gmScreen.js","sources":["../../src/types.ts","../../src/module/constants.ts","../../src/module/helpers.ts","../../src/module/classes/GmScreenSettingsConfig.ts","../../src/module/classes/GmScreenData.ts","../../src/module/classes/DocumentSheets/CompactRollTableSheet.ts","../../src/module/classes/GmScreenCell.ts","../../src/module/classes/GmScreenApplication.ts","../../src/module/classes/GmScreen.ts","../../src/module/foundryvtt-gmScreen.ts"],"sourcesContent":["export interface GmScreenSettingsData {\n  grids: Record<string, GmScreenGrid>; // object of all grids keyed by uuid\n  activeGridId: keyof GmScreenSettingsData['grids']; // currently visible grid's id\n}\n\nexport interface GmScreenGrid {\n  entries: Record<string, GmScreenGridEntry>; // keyed by cellId\n  id: string; // grid's uuid\n  name: string; // user configurable\n  isShared: boolean;\n  rowOverride?: number;\n  columnOverride?: number;\n}\n\nexport interface GmScreenGridEntry {\n  x: number;\n  y: number;\n  spanRows?: number;\n  spanCols?: number;\n  entityUuid?: string;\n  entryId: string;\n}\n\nexport interface GmScreenApi {\n  toggleGmScreenVisibility(isOpen?: boolean): void;\n  refreshGmScreen(): void;\n}\n\nexport enum MySettings {\n  columns = 'columns',\n  displayDrawer = 'display-as-drawer',\n  drawerHeight = 'drawer-height',\n  drawerOpacity = 'drawer-opacity',\n  drawerWidth = 'drawer-width',\n  gmScreenConfig = 'gm-screen-config',\n  migrated = 'migrated',\n  condensedButton = 'condensedButton',\n  reset = 'reset',\n  rightMargin = 'right-margin',\n  rows = 'rows',\n}\n\nexport enum MyHooks {\n  openClose = 'gmScreenOpenClose',\n  ready = 'gmScreenReady',\n}\n\nexport enum MyFlags {\n  gmScreenSheetClass = 'gmScreenSheetClass',\n}\n","export const MODULE_ID = 'gm-screen';\nexport const MODULE_ABBREV = 'GMSCR';\n\nexport const TEMPLATES = {\n  settings: `modules/${MODULE_ID}/templates/settings.hbs`,\n  screen: `modules/${MODULE_ID}/templates/screen.hbs`,\n  screenCell: `modules/${MODULE_ID}/templates/parts/screen-cell.hbs`,\n  screenGrid: `modules/${MODULE_ID}/templates/parts/screen-grid.hbs`,\n  compactRollTable: `modules/${MODULE_ID}/templates/parts/compact-roll-table.hbs`,\n  compactJournalEntry: `modules/${MODULE_ID}/templates/parts/compact-journal-entry.hbs`,\n  entitySheetInjection: `modules/${MODULE_ID}/templates/parts/entity-sheet-injection.hbs`,\n  grids: {\n    tableRow: `modules/${MODULE_ID}/templates/parts/settings-grid-config-table-row.hbs`,\n  },\n};\n\nexport enum MySettings {\n  columns = 'columns',\n  displayDrawer = 'display-as-drawer',\n  drawerHeight = 'drawer-height',\n  drawerOpacity = 'drawer-opacity',\n  drawerWidth = 'drawer-width',\n  gmScreenConfig = 'gm-screen-config',\n  migrated = 'migrated',\n  condensedButton = 'condensedButton',\n  reset = 'reset',\n  rightMargin = 'right-margin',\n  rows = 'rows',\n}\n\nexport enum MyHooks {\n  openClose = 'gmScreenOpenClose',\n  ready = 'gmScreenReady',\n}\n\nexport enum MyFlags {}\n\nexport const numberRegex = /([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))(?:[eE]([+-]?\\d+))?/;\n","import { GmScreenGridEntry } from '../types';\nimport { GmScreen } from './classes/GmScreen';\nimport { MODULE_ABBREV, MODULE_ID } from './constants';\n\nexport function log(force: boolean, ...args: any[]) {\n  const shouldLog = force || game.modules.get('_dev-mode')?.api?.getPackageDebugValue(MODULE_ID);\n\n  if (shouldLog) {\n    console.log(MODULE_ID, '|', ...args);\n  }\n}\n\nexport const debouncedReload = foundry.utils.debounce(() => window.location.reload(), 100);\n\n/**\n * Creates a custom CSS property with the name provide on the element.style of all elements which match\n * the selector provided containing the computed value of the property specified.\n *\n * @param {JQuery<HTMLElement>} html - Some HTML element to search within for the selector\n * @param {string} selector - A CSS style selector which will be used to locate the target elements for this function.\n * @param {keyof CSSStyleDeclaration} property - The name of a CSS property to obtain the computed value of\n * @param {string} name - The name of the CSS variable (custom property) that will be created/updated.\n * @memberof GmScreenApplication\n */\nexport function updateCSSPropertyVariable(\n  html: JQuery<HTMLElement>,\n  selector: string,\n  property: keyof CSSStyleDeclaration,\n  name: string,\n) {\n  html.find(selector).each((i, gridCell) => {\n    const value = window.getComputedStyle(gridCell)[property];\n    gridCell.style.setProperty(name, String(value));\n  });\n}\n\n/**\n * Helper for getting a user's cell config inputs via a dialog\n */\nexport function getUserCellConfigurationInput(\n  cellToConfigure: GmScreenGridEntry,\n  gridDetails: {\n    rows: number;\n    columns: number;\n  },\n) {\n  return new Promise<{\n    newSpanRows: number;\n    newSpanCols: number;\n  }>((resolve, reject) => {\n    new Dialog({\n      title: game.i18n.localize(`${MODULE_ABBREV}.cellConfigDialog.CellConfig`),\n      content: `\n  <form class=\"flexcol\">\n    <div class=\"form-group\">\n      <label for=\"spanRows\">${game.i18n.localize(`${MODULE_ABBREV}.cellConfigDialog.RowSpan`)}</label>\n      <input type=\"number\" step=\"1\" name=\"spanRows\" min=\"1\" max=\"${gridDetails.rows + 1 - cellToConfigure.y}\" value=\"${\n        cellToConfigure.spanRows || 1\n      }\">\n    </div>\n    <div class=\"form-group\">\n      <label for=\"spanCols\">${game.i18n.localize(`${MODULE_ABBREV}.cellConfigDialog.ColSpan`)}</label>\n      <input type=\"number\" step=\"1\" name=\"spanCols\" min=\"1\" max=\"${\n        gridDetails.columns + 1 - cellToConfigure.x\n      }\" value=\"${cellToConfigure.spanCols || 1}\">\n    </div>\n  </form>\n`,\n      buttons: {\n        no: {\n          icon: '<i class=\"fas fa-times\"></i>',\n          label: game.i18n.localize('Cancel'),\n        },\n        reset: {\n          icon: '<i class=\"fas fa-undo\"></i>',\n          label: game.i18n.localize('Default'),\n          callback: () => {\n            const formValues = {\n              newSpanRows: 1,\n              newSpanCols: 1,\n            };\n\n            log(false, 'dialog formValues', formValues);\n\n            resolve(formValues);\n          },\n        },\n        yes: {\n          icon: '<i class=\"fas fa-check\"></i>',\n          label: game.i18n.localize('Submit'),\n          //@ts-expect-error idk\n          callback: (html: JQuery<HTMLElement>) => {\n            const formValues = {\n              newSpanRows: Number(html.find('[name=\"spanRows\"]').val()),\n              newSpanCols: Number(html.find('[name=\"spanCols\"]').val()),\n            };\n\n            log(false, 'dialog formValues', formValues);\n\n            resolve(formValues);\n          },\n        },\n      },\n      default: 'yes',\n      close: () => {\n        reject();\n      },\n    }).render(true);\n  });\n}\n","import { GmScreenSettingsData } from '../../types';\nimport { MODULE_ABBREV, MODULE_ID } from '../constants';\nimport { log } from '../helpers';\nimport { GmScreen } from './GmScreen';\n\n// we have no custom options\ntype GmScreenSettingsConfigOptions = FormApplicationOptions;\n\n// the data provided to the template should look like this\ninterface GmScreenSettingsConfigData {\n  settings: GmScreenSettingsData;\n  defaultRows: number;\n  defaultColumns: number;\n}\n\n// this application is instanciated by core with no object provided\ntype GmScreenSettingsObject = undefined;\n\nexport class GmScreenSettingsConfig extends FormApplication<\n  GmScreenSettingsConfigOptions,\n  GmScreenSettingsConfigData,\n  GmScreenSettingsObject\n> {\n  static get defaultOptions() {\n    return {\n      ...super.defaultOptions,\n      classes: ['gm-screen-config'],\n      closeOnSubmit: false,\n      height: 'auto' as const,\n      submitOnChange: false,\n      submitOnClose: false,\n      id: 'gm-screen-tabs-config',\n      template: GmScreen.TEMPLATES.settings,\n      title: game.i18n.localize(`${MODULE_ABBREV}.gridConfig.GridConfig`),\n      width: 600,\n    };\n  }\n\n  get data() {\n    return GmScreen.dataManager.gmScreenSettingsConfigData;\n  }\n\n  getData() {\n    return {\n      ...GmScreen.dataManager.gmScreenSettingsConfigData,\n    };\n  }\n\n  // TODO: Audit this?\n  _dragListeners(html: JQuery) {\n    let draggedRow: HTMLElement | undefined;\n\n    html.on('dragstart', (e) => {\n      draggedRow = e.target;\n    });\n\n    html.on('dragover', (e) => {\n      if (!draggedRow) {\n        return;\n      }\n\n      const targetRow = $(e.target).parents('tbody tr')[0];\n\n      if (!targetRow) {\n        return;\n      }\n\n      const tableRows = Array.from($(e.target).parents('tbody').children()) as HTMLElement[];\n\n      if (tableRows.indexOf(targetRow) > tableRows.indexOf(draggedRow)) {\n        targetRow.after(draggedRow);\n      } else {\n        targetRow.before(draggedRow);\n      }\n    });\n\n    html.on('dragend', (e) => {\n      draggedRow = undefined;\n    });\n  }\n\n  handleNewRowClick = async (currentTarget: JQuery) => {\n    const tbodyElement = $(this.element).find('tbody');\n\n    const newGridRowTemplateData = {\n      gridId: randomID(),\n      grid: {\n        name: '',\n        columnOverride: '',\n        rowOverride: '',\n      },\n      defaultColumns: this.data.defaultColumns,\n      defaultRows: this.data.defaultRows,\n    };\n\n    const newRow = $(await renderTemplate(GmScreen.TEMPLATES.grids.tableRow, newGridRowTemplateData));\n    // render a new row at the end of tbody\n    tbodyElement.append(newRow);\n    this.setPosition({}); // recalc height\n  };\n\n  handleDeleteRowClick = (currentTarget: JQuery) => {\n    log(false, 'delete row clicked', {\n      currentTarget,\n    });\n\n    currentTarget.closest('tr').remove();\n    this.setPosition({}); // recalc height\n  };\n\n  activateListeners(html: JQuery) {\n    super.activateListeners(html);\n\n    this._dragListeners(html);\n\n    html.on('click', 'button', (event) => {\n      const action = event.currentTarget?.dataset?.action;\n\n      switch (action) {\n        case 'add-row': {\n          this.handleNewRowClick(event.currentTarget);\n          break;\n        }\n        case 'delete-row': {\n          this.handleDeleteRowClick(event.currentTarget);\n          break;\n        }\n      }\n    });\n  }\n\n  async _updateObject(event: Event, formData: object) {\n    const dataManager = GmScreen.dataManager;\n\n    const formDataObject: Omit<GmScreenSettingsData, 'activeGridId'> = expandObject(formData);\n\n    log(false, {\n      formData,\n      formDataObject,\n    });\n\n    if (Object.keys(formDataObject).length === 0) {\n      ui.notifications?.error(game.i18n.localize(`${MODULE_ABBREV}.gridConfig.errors.empty`));\n      throw new Error('Cannot save the grid with no tabs.');\n    }\n\n    const newGridIds = Object.keys(formDataObject.grids);\n\n    // rebuild the grids object on every save\n    const newGrids = newGridIds.reduce<GmScreenSettingsData['grids']>((acc, gridId) => {\n      const grid = formDataObject.grids[gridId];\n\n      // if this grid exists already, spread the old and modify it\n      if (dataManager.grids.hasOwnProperty(gridId)) {\n        acc[gridId] = {\n          ...dataManager.grids[gridId],\n          ...grid,\n        };\n\n        return acc;\n      }\n\n      // otherwise create it\n      acc[gridId] = {\n        ...grid,\n        entries: {},\n        name: grid.name ?? '',\n        isShared: grid.isShared ?? false,\n        id: gridId,\n      };\n\n      return acc;\n    }, {});\n\n    // handle case where active tab is deleted\n    const newActiveGridId = newGridIds.includes(dataManager.activeGmGridId)\n      ? dataManager.activeGmGridId\n      : newGridIds[0];\n\n    const newGmScreenConfig: GmScreenSettingsData = {\n      grids: newGrids,\n      activeGridId: newActiveGridId,\n    };\n\n    log(true, 'setting settings', {\n      newGmScreenConfig,\n    });\n\n    await game.settings.set(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig, newGmScreenConfig);\n\n    this.close();\n  }\n}\n","import { JournalEntryData } from '@league-of-foundry-developers/foundry-vtt-types/src/foundry/common/data/module.mjs';\nimport { GmScreenGrid, GmScreenGridEntry, GmScreenSettingsData, MyHooks, MySettings } from '../../types';\nimport { MODULE_ABBREV, MODULE_ID } from '../constants';\nimport { debouncedReload, log } from '../helpers';\nimport { GmScreen } from './GmScreen';\nimport { GmScreenSettingsConfig } from './GmScreenSettingsConfig';\n\nexport const defaultGmScreenData: GmScreenSettingsData = {\n  activeGridId: 'default',\n  grids: {\n    default: {\n      name: 'Main',\n      id: 'default',\n      isShared: false,\n      entries: {},\n    },\n  },\n};\n\n/**\n * Handles getting and preparing the GM Screen data for the logged in user.\n * Refreshed via the `refresh` method, does not automatically keep up to date with settings.\n * Also provides some helper functions for setting grid-related data.\n *\n * Responsible for keeping track of the GM Screen Settings data changes to make refreshing the grid less resource heavy.\n */\nexport class GmScreenDataManager {\n  /**\n   * This class's current understanding of the GM Screen Data\n   */\n  _oldData?: GmScreenSettingsData;\n  _data: GmScreenSettingsData;\n  _gridOptions: {\n    rows: number;\n    columns: number;\n  };\n\n  constructor() {\n    this._data = game.settings.get(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig);\n    this._gridOptions = {\n      rows: game.settings.get(MODULE_ID, GmScreen.SETTINGS.rows),\n      columns: game.settings.get(MODULE_ID, GmScreen.SETTINGS.columns),\n    };\n  }\n\n  /**\n   * Cached copy of the previous grid data from settings\n   * used to tell the diff\n   */\n  // static _oldGmScreenConfig: GmScreenSettingsData;\n\n  get gmScreenSettingsConfigData() {\n    return {\n      settings: this._data,\n      defaultRows: this._gridOptions.rows,\n      defaultColumns: this._gridOptions.columns,\n    };\n  }\n\n  // static get _defaultColumns() {\n  //   return game.settings.get(MODULE_ID, GmScreen.SETTINGS.columns);\n  // }\n\n  // static get _defaultRows() {\n  //   return game.settings.get(MODULE_ID, GmScreen.SETTINGS.rows);\n  // }\n\n  /** Filters grids to ones the logged in user can see */\n  get grids() {\n    return GmScreenDataManager.getUserVisibleGridsFromSettingsData(this._data);\n  }\n\n  /** Only matters to the GM */\n  get activeGmGridId() {\n    return this._data?.activeGridId ?? defaultGmScreenData.activeGridId;\n  }\n\n  /**\n   * Helper to return the grid currently marked active\n   * Only matters for GMs\n   */\n  get activeGmGrid() {\n    return this.grids[this.activeGmGridId];\n  }\n\n  /**\n   * @returns `true` if the user has any visible grids\n   */\n  get hasUserViewableGrids() {\n    return !!Object.keys(this.grids).length;\n  }\n\n  /**\n   * @returns `true` if the user wants to use drawer mode\n   */\n  get drawerMode() {\n    return game.settings.get(MODULE_ID, GmScreen.SETTINGS.displayDrawer);\n  }\n\n  /**\n   * A helper to aggregate a few settings useful for displaying the GM Screen Application\n   */\n  get applicationData() {\n    const { SETTINGS } = GmScreen;\n    return {\n      ...this._gridOptions,\n      rightMargin: game.settings.get(MODULE_ID, SETTINGS.rightMargin),\n      drawerWidth: game.settings.get(MODULE_ID, SETTINGS.drawerWidth),\n      drawerHeight: game.settings.get(MODULE_ID, SETTINGS.drawerHeight),\n      drawerOpacity: game.settings.get(MODULE_ID, SETTINGS.drawerOpacity),\n      condensedButton: game.settings.get(MODULE_ID, SETTINGS.condensedButton),\n      displayDrawer: game.settings.get(MODULE_ID, SETTINGS.displayDrawer),\n    };\n  }\n\n  /**\n   * Gets the gridIds that were most recently updated\n   * @returns the grid ids that have changed recently\n   */\n  get diffGridIds() {\n    if (!this._oldData?.grids) {\n      return Object.keys(this._data.grids);\n    }\n\n    return Object.keys(foundry.utils.diffObject(this._oldData.grids, this._data.grids));\n  }\n\n  /**\n   * Checks if there are any newly visible or invisible grids to this user\n   * @returns true if the grids visible to this user have changed\n   */\n  get visibleGridIdsChanged() {\n    const userVisibleGridIds = new Set(Object.keys(this.grids));\n\n    // if there was no old data, all grids are new\n    if (!this._oldData) {\n      return true;\n    }\n\n    const oldUserVisibleGridIds = new Set(\n      Object.keys(GmScreenDataManager.getUserVisibleGridsFromSettingsData(this._oldData)),\n    );\n\n    return !userVisibleGridIds.equals(oldUserVisibleGridIds);\n  }\n\n  /**\n   * Populate this instance with the data from settings.\n   * Runs from the Settings registered `onChange`\n   * Re-renders the grid if necessary\n   * // should be `refreshGmScreen` from the api\n   */\n  refresh = () => {\n    this._oldData = foundry.utils.deepClone(this._data);\n\n    this._data = game.settings.get(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig);\n    this._gridOptions = {\n      rows: game.settings.get(MODULE_ID, GmScreen.SETTINGS.rows),\n      columns: game.settings.get(MODULE_ID, GmScreen.SETTINGS.columns),\n    };\n\n    log(false, 'refreshing gm screen data', {\n      newData: foundry.utils.deepClone(this._data),\n      data: foundry.utils.deepClone(this._oldData),\n      diffGridIds: this.diffGridIds,\n    });\n\n    // do nothing if there are no grid ids that changed\n    if (!this.diffGridIds) {\n      return;\n    }\n\n    // 1. see if the grids I can see are the ones that changed\n    // if this is true we need to rerender\n    const myGridsChanged = this.diffGridIds.filter((diffGridId) => Object.keys(this.grids).includes(diffGridId));\n\n    // 2. check if the gridIds I can currently see are the same as before the diff\n    // if this is true we need to rerender\n    const myVisibleGridIdsChanged = this.visibleGridIdsChanged;\n\n    // if both are false, don't re-render\n    if (!myVisibleGridIdsChanged && !myGridsChanged) {\n      log(false, 'not rerendering because none of my visible grids changed');\n      return;\n    }\n\n    // TODO: Re-render GM Screen Application?\n    // provides diffGridIds\n    GmScreen.gmScreenApp.refresh();\n  };\n\n  /**\n   * Overrides the existing Grid object in settings with the provided object\n   *\n   * Refreshes automatically on all clients because of the `onChange` callback on the setting registration\n   */\n  setGridData(newGridData: GmScreenGrid) {\n    if (!game.user?.isGM) {\n      throw new Error('You must be a GM user to edit a Grid');\n    }\n\n    const newGmScreenConfig = foundry.utils.deepClone(this._data);\n\n    const updated = setProperty(newGmScreenConfig, `grids.${newGridData.id}`, newGridData);\n\n    if (!updated) {\n      // something failed\n      throw new Error('Something went wrong trying to update the grid data.');\n    }\n\n    log(false, 'setGridData', {\n      currentConfig: this._data,\n      newGmScreenConfig,\n      updated,\n    });\n\n    // changing this setting will auto-refresh the screen\n    return game.settings.set(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig, newGmScreenConfig);\n  }\n\n  /**\n   * Sets the active GM Grid ID (i.e. the one we expect the GM to be looking at)\n   */\n  async setActiveGmGridId(newActiveGridId?: string) {\n    if (!game.user?.isGM || newActiveGridId === this.activeGmGridId || !newActiveGridId) {\n      return;\n    }\n\n    log(false, 'trying to set active grid', { newActiveGridId });\n\n    try {\n      const newGmScreenConfig = foundry.utils.deepClone(this._data);\n      newGmScreenConfig.activeGridId = newActiveGridId;\n      await game.settings.set(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig, newGmScreenConfig);\n    } catch (error) {\n      log(true, 'error setting active tab', error);\n    }\n  }\n\n  /**\n   * Gets the grid entries for a given grid as an array with empty cells populated\n   */\n  getHydratedGridEntries(grid: GmScreenGrid) {\n    const gridColumns = grid.columnOverride ?? this._gridOptions.columns;\n    const gridRows = grid.rowOverride ?? this._gridOptions.rows;\n\n    const emptyCellsNum = Number(gridColumns) * Number(gridRows) - GmScreenDataManager.getNumOccupiedCells(grid);\n    const emptyCells: Partial<GmScreenGridEntry>[] =\n      emptyCellsNum > 0 ? [...new Array(emptyCellsNum)].map(() => ({})) : [];\n\n    return [...Object.values(grid.entries), ...emptyCells];\n  }\n\n  /**\n   * Adds a new entry to the currently active grid\n   */\n  addEntryToActiveGrid(newEntry: GmScreenGridEntry) {\n    if (!game.user?.isGM) {\n      throw new Error('You must be a GM user to edit a Grid');\n    }\n\n    const newEntries = { ...this.activeGmGrid.entries };\n\n    newEntries[newEntry.entryId] = {\n      ...newEntries[newEntry.entryId],\n      ...newEntry,\n    };\n\n    const newGridData: GmScreenGrid = {\n      ...this.activeGmGrid,\n      entries: newEntries,\n    };\n\n    log(false, 'addEntryToActiveGrid', {\n      activeGmGridData: this.activeGmGrid,\n      newEntries,\n      newEntry,\n      newGridData,\n    });\n\n    return this.setGridData(newGridData);\n  }\n\n  /**\n   * Remove a given entry from the Active Grid\n   * @param {string} entryId - entry to remove from the active grid's entries\n   */\n  removeEntryFromActiveGrid(entryId: string) {\n    const clearedCell = foundry.utils.deepClone(this.activeGmGrid.entries[entryId]);\n    const shouldKeepCellLayout = clearedCell.spanCols || clearedCell.spanRows;\n\n    const newEntries = {\n      ...this.activeGmGrid.entries,\n    };\n\n    if (shouldKeepCellLayout) {\n      delete clearedCell.entityUuid;\n      newEntries[entryId] = clearedCell;\n    } else {\n      delete newEntries[entryId];\n    }\n\n    const newGridData: GmScreenGrid = {\n      ...this.activeGmGrid,\n      entries: newEntries,\n    };\n\n    // TODO: This needs to close the open entry applications(?)\n    return this.setGridData(newGridData);\n  }\n\n  /**\n   * Handles any cell overlap problems that new grid entry data might introduce\n   */\n  editCellInActiveGrid(gridEntry: GmScreenGridEntry) {\n    const newEntries = {\n      ...this.activeGmGrid.entries,\n      [gridEntry.entryId]: gridEntry,\n    };\n\n    // based on the X, Y, and Span values of `newCell` find all problematic entryIds\n    // BRITTLE if entryId's formula changes\n    const problemCoordinates = [...Array(gridEntry.spanCols).keys()]\n      .map((_, index) => {\n        const problemX = gridEntry.x + index;\n\n        return [...Array(gridEntry.spanRows).keys()].map((_, index) => {\n          const problemY = gridEntry.y + index;\n          return `${problemX}-${problemY}`; // problem cell's id\n        });\n      })\n      .flat();\n\n    log(false, {\n      problemCoordinates,\n    });\n\n    // get any overlapped cells and remove them\n    Object.values(newEntries).forEach((entry) => {\n      if (problemCoordinates.includes(entry.entryId) && entry.entryId !== gridEntry.entryId) {\n        delete newEntries[entry.entryId];\n      }\n    });\n\n    log(false, 'newEntries', newEntries);\n\n    const newGridData = {\n      ...this.activeGmGrid,\n      entries: newEntries,\n    };\n\n    return this.setGridData(newGridData);\n  }\n\n  /**\n   * Double confirms Clearing the Active Grid\n   */\n  clearActiveGrid = () => {\n    log(false, 'clearActiveGrid');\n\n    return Dialog.confirm({\n      title: game.i18n.localize(`${MODULE_ABBREV}.warnings.clearConfirm.Title`),\n      content: game.i18n.localize(`${MODULE_ABBREV}.warnings.clearConfirm.Content`),\n      yes: async () => {\n        return this.setGridData({\n          ...this.activeGmGrid,\n          entries: {},\n        });\n      },\n    });\n  };\n\n  /***********************/\n  /**  STATIC HELPERS  ***/\n  /***********************/\n\n  /**\n   * Given the set of settings data, return only the grids visible to this user\n   */\n  static getUserVisibleGridsFromSettingsData({ grids }: GmScreenSettingsData) {\n    if (!game.user) {\n      return {};\n    }\n\n    if (game.user?.isGM) {\n      return grids;\n    }\n\n    return Object.fromEntries(Object.entries(grids).filter(([_gridId, gridData]) => gridData.isShared));\n  }\n\n  /** Calulates how many cells are occupied for a given grid */\n  static getNumOccupiedCells(grid: GmScreenGrid) {\n    return Object.values(grid.entries).reduce((acc, entry) => {\n      const cellsTaken = (entry.spanCols || 1) * (entry.spanRows || 1);\n      return acc + cellsTaken;\n    }, 0);\n  }\n\n  /**\n   * Utility method to help typescript understand that these are only\n   * actors, items, journals, or rolltables\n   *\n   * @param entityUuid - relevant entityUuid\n   */\n  static async getRelevantGmScreenDocument(entityUuid: string) {\n    const relevantDocument = await fromUuid(entityUuid);\n\n    if (\n      !(\n        relevantDocument instanceof Actor ||\n        relevantDocument instanceof Item ||\n        relevantDocument instanceof JournalEntry ||\n        relevantDocument instanceof JournalEntryPage ||\n        relevantDocument instanceof RollTable\n      )\n    ) {\n      return;\n    }\n\n    return relevantDocument;\n  }\n}\n","import { GmScreen } from '../GmScreen';\n\nexport class CompactRollTableDisplay extends RollTableConfig {\n  get isEditable() {\n    return false;\n  }\n\n  static get defaultOptions() {\n    return foundry.utils.mergeObject(super.defaultOptions, {\n      template: GmScreen.TEMPLATES.compactRollTable,\n      editable: false,\n      popOut: false,\n    });\n  }\n\n  getData() {\n    const sheetData = super.getData();\n\n    if (sheetData instanceof Promise) {\n      return sheetData;\n    }\n\n    // TODO: Rolltable.Result and Results wrong\n    const enrichedResults = (sheetData.results as unknown as RollTableConfig.Data['results'][]).map(\n      (result: RollTableConfig.Data['results']) => {\n        const label = this._getLabelFromResult(result);\n        return {\n          ...result,\n          label,\n        };\n      },\n    );\n\n    return { ...sheetData, enrichedResults };\n  }\n\n  async _rollOnTable() {\n    const rollTable = this.document as RollTable;\n    await rollTable.draw();\n  }\n\n  private _getLabelFromResult(result: TableResult): string {\n    let label: string;\n\n    switch (result.type) {\n      case CONST.TABLE_RESULT_TYPES.COMPENDIUM: {\n        label = `@Compendium[${result.documentCollection}.${result.documentId}]{${result.text}}`;\n        break;\n      }\n      case CONST.TABLE_RESULT_TYPES.ENTITY: {\n        label = `@${result.documentCollection}[${result.documentId}]{${result.text}}`;\n        break;\n      }\n      default:\n        label = result.text;\n    }\n\n    return label;\n  }\n}\n","import { GmScreenGridEntry } from '../../types';\nimport { MODULE_ID } from '../constants';\nimport { getUserCellConfigurationInput, log } from '../helpers';\nimport { CompactRollTableDisplay } from './DocumentSheets/CompactRollTableSheet';\nimport { GmScreen } from './GmScreen';\nimport { GmScreenDataManager } from './GmScreenData';\n\ninterface SheetClassDefinition {\n  cls: DocumentSheet;\n  default: boolean;\n  id: string;\n  label: string;\n}\n\n/**\n * Helpers to make interacting with or rendering a given GridEntry easier\n * TODO: Should this be it's own class that is created for each cell?\n */\nexport class GmScreenCell {\n  /**\n   * Apply overrides to make this grid entry render inside the provided cellId\n   * MUTATES SheetClass\n   * BRITTLE\n   */\n  static applyGmScreenCellSheetOverrides(SheetClass: DocumentSheet, cellId: string) {\n    SheetClass.options.editable = false;\n    SheetClass.options.popOut = false;\n    //@ts-expect-error Yeah I know this isn't the best idea\n    SheetClass.cellId = cellId;\n\n    Object.defineProperty(SheetClass, 'isEditable', { value: false });\n\n    //@ts-expect-error Yeah I know this isn't the best idea\n    SheetClass._injectHTML = function (html) {\n      //@ts-expect-error I inject cellId\n      $(this.cellId).find('.gm-screen-grid-cell-title').text(this.title);\n\n      //@ts-expect-error I inject cellId\n      const gridCellContent = $(this.cellId).find('.gm-screen-grid-cell-content');\n\n      log(false, 'CompactEntitySheet overwritten _injectHTML', {\n        targetElement: gridCellContent,\n        gridCellContent,\n        //@ts-expect-error I inject cellId\n        cellId: this.cellId,\n        html,\n      });\n      gridCellContent.append(html);\n      //@ts-expect-error Yeah I know this isn't the best idea\n      this._element = html;\n    };\n\n    //@ts-expect-error Yeah I know this isn't the best idea\n    SheetClass._replaceHTML = function (element, html, options) {\n      //@ts-expect-error I inject cellId\n      $(this.cellId).find('.gm-screen-grid-cell-title').text(this.title);\n\n      //@ts-expect-error I inject cellId\n      const gridCellContent = $(this.cellId).find('.gm-screen-grid-cell-content');\n      gridCellContent.html(html);\n      //@ts-expect-error Yeah I know this isn't the best idea\n      this._element = html;\n    };\n  }\n\n  /**\n   * Obtain the FormApplication class constructor which should be used to display this Document in the Gm Screen.\n   * Adapted from `ClientDocumentMixin._getSheetClass`\n   */\n  static _getGridEntrySheetClass(document: Actor | Item | JournalEntry | RollTable) {\n    const cfg = CONFIG[document.documentName];\n\n    // @ts-expect-error 'type' is expected to be undefined sometimes\n    // this document's type (or \"base\")\n    const type: string = document.type || CONST.BASE_DOCUMENT_TYPE;\n\n    // @ts-expect-error 'sheetClasses' is expected to exist\n    // this document type's sheet definitions\n    const documentTypeSheets: Record<string, SheetClassDefinition> = cfg.sheetClasses[type] || {};\n\n    const gmScreenOverride = document.getFlag(MODULE_ID, GmScreen.FLAGS.gmScreenSheetClass) as string;\n\n    const coreOverride = document.getFlag('core', 'sheetClass') as string;\n\n    // if there's a gm screen override defined, use that\n    if (documentTypeSheets[gmScreenOverride]) return documentTypeSheets[gmScreenOverride].cls;\n\n    // if there's a core override defined, use that\n    if (documentTypeSheets[coreOverride]) return documentTypeSheets[coreOverride].cls;\n\n    // all of the sheet class definitions for this document's type\n    const possibleSheetDefinitions = Object.values(documentTypeSheets);\n    if (!possibleSheetDefinitions.length) return null;\n\n    // TODO: Add \"GM Screen Default Sheet Class\"\n\n    const coreDefaultSheetClass = (possibleSheetDefinitions.find((s) => s.default) ?? possibleSheetDefinitions.pop())\n      ?.cls;\n\n    // I have no idea how to incorporate this into the sheet enum in a nice way\n    if (document instanceof RollTable) {\n      return CompactRollTableDisplay;\n    }\n\n    return coreDefaultSheetClass;\n  }\n\n  /**\n   * Gets user inputs about how a cell should change (row and column span)\n   * submits that as an edit\n   */\n  static async _onConfigureGridEntry({ x, y }: { x: number; y: number }, entryId?: string) {\n    try {\n      let entryToConfigure: GmScreenGridEntry = {\n        x,\n        y,\n        entryId: `${x}-${y}`,\n      };\n\n      if (entryId) {\n        entryToConfigure = GmScreen.dataManager.activeGmGrid.entries[entryId];\n      }\n\n      log(false, 'configureCell cellToConfigure', entryToConfigure);\n\n      const { newSpanRows, newSpanCols } = await getUserCellConfigurationInput(entryToConfigure, {\n        rows: GmScreen.dataManager.activeGmGrid.rowOverride ?? GmScreen.dataManager.applicationData.rows,\n        columns: GmScreen.dataManager.activeGmGrid.columnOverride ?? GmScreen.dataManager.applicationData.columns,\n      });\n\n      log(false, 'new span values from dialog', {\n        newSpanRows,\n        newSpanCols,\n      });\n\n      const newEntry = {\n        ...entryToConfigure,\n        spanRows: newSpanRows,\n        spanCols: newSpanCols,\n      };\n\n      return GmScreen.dataManager.editCellInActiveGrid(newEntry);\n    } catch (e) {\n      log(false, 'User exited configure cell Dialog.');\n    }\n  }\n\n  /**\n   * Handle \"open\" clicks to render the original document's sheet normally\n   */\n  static async _onClickOpen(entityUuid?: string) {\n    if (!entityUuid) {\n      return;\n    }\n\n    try {\n      const relevantDocument = await GmScreenDataManager.getRelevantGmScreenDocument(entityUuid);\n      const relevantDocumentSheet = relevantDocument?.sheet;\n      log(false, 'trying to edit entity', { relevantEntitySheet: relevantDocumentSheet });\n\n      if (!relevantDocumentSheet) {\n        return;\n      }\n\n      // If the sheet is already rendered:\n      if (relevantDocumentSheet.rendered) {\n        relevantDocumentSheet.bringToTop();\n        return relevantDocumentSheet.maximize();\n      }\n\n      // Otherwise render the relevantDocumentSheet\n      else relevantDocumentSheet.render(true);\n    } catch (error) {\n      log(true, 'error opening entity sheet', error);\n    }\n  }\n}\n","import { GmScreenGridEntry } from '../../types';\nimport { MODULE_ABBREV, MODULE_ID } from '../constants';\nimport { log, updateCSSPropertyVariable } from '../helpers';\nimport { GmScreenCell } from './GmScreenCell';\nimport { GmScreen } from './GmScreen';\nimport { GmScreenDataManager } from './GmScreenData';\nimport { GmScreenSettingsConfig } from './GmScreenSettingsConfig';\nimport { CompactRollTableDisplay } from './DocumentSheets/CompactRollTableSheet';\n\nenum ClickAction {\n  'clearGrid' = 'clearGrid',\n  'refresh' = 'refresh',\n  'clearCell' = 'clearCell',\n  'configureCell' = 'configureCell',\n  'open' = 'open',\n  'toggle-gm-screen' = 'toggle-gm-screen',\n  'setActiveGridId' = 'setActiveGridId',\n  'rolltable' = 'rolltable',\n  'rolltable-reset' = 'rolltable-reset',\n}\n\ntype GmScreenApp = ActorSheet | ItemSheet | JournalSheet | RollTableConfig;\n\n/**\n * @abstract\n */\nexport class GmScreenApplicationCommon extends Application {\n  /** Cache of applications rendered within this gm screen */\n  apps: Record<string, GmScreenApp>;\n  draggedTab: HTMLElement | undefined;\n\n  constructor(options = {}) {\n    super(options);\n    this.apps = {};\n  }\n\n  /** Configures the ScrollY, GM Drag/Drop, and Tabs for all use cases */\n  static get defaultOptions(): ApplicationOptions {\n    const {\n      grids,\n      activeGmGridId,\n      applicationData: { columns, rows },\n    } = GmScreen.dataManager;\n\n    // set all of the cells of all the grids to be scrollY managed\n    const scrollY = Object.keys(grids).reduce((acc, gridKey) => {\n      const gridColumns = grids[gridKey].columnOverride ?? columns;\n      const gridRows = grids[gridKey].rowOverride ?? rows;\n\n      const totalCells = Number(gridColumns) * Number(gridRows);\n\n      const gridKeyScrollY = [...new Array(totalCells)].map(\n        (_, index) => `#gm-screen-${gridKey}-cell-${index} .gm-screen-grid-cell-content`,\n      );\n      return acc.concat(gridKeyScrollY);\n    }, [] as string[]);\n\n    return {\n      ...super.defaultOptions,\n      ...(game.user?.isGM\n        ? {\n            dragDrop: [{ dropSelector: '.gm-screen-grid-cell' }],\n          }\n        : undefined),\n      tabs: [\n        {\n          navSelector: '.gm-screen-tabs',\n          contentSelector: '.gm-screen-app',\n          initial: activeGmGridId,\n        },\n      ],\n      template: GmScreen.TEMPLATES.screen,\n      id: 'gm-screen-app',\n      scrollY,\n    };\n  }\n\n  /**\n   * This currently thinly wraps `this.render`, but might be more complicated in the future.\n   */\n  refresh() {\n    this.render();\n  }\n\n  /**\n   * Hydrates all visible grids with empty cells in the format the handlebars files wants to display\n   */\n  get hydratedGridEntries() {\n    const grids = GmScreen.dataManager.grids;\n\n    return Object.fromEntries(\n      Object.entries(grids).map(([gridId, gridData]) => {\n        return [\n          gridId,\n          {\n            ...gridData,\n            gridEntries: GmScreen.dataManager.getHydratedGridEntries(gridData),\n          },\n        ];\n      }),\n    );\n  }\n\n  /**\n   * @override\n   */\n  getData() {\n    const { applicationData, hasUserViewableGrids } = GmScreen.dataManager;\n\n    const newAppData = {\n      ...super.getData(),\n      ...applicationData,\n      grids: this.hydratedGridEntries,\n      isGM: !!game.user?.isGM,\n      hidden: !hasUserViewableGrids,\n      drawerMode: GmScreen.dataManager.drawerMode,\n    };\n\n    log(false, 'getData', {\n      newAppData,\n    });\n\n    return newAppData;\n  }\n\n  /**\n   * Handles actually rendering the application, we want to inject our cells\n   * at the end of this method\n   * @override\n   */\n  async _render(...args: any[]) {\n    const promise = await super._render(...args);\n\n    // stop here if there's no user-viewable grids\n    if (!GmScreen.dataManager.hasUserViewableGrids) {\n      return promise;\n    }\n\n    const html = this.element;\n    // add our cell contents to the template now that our application is done rendering\n    this.injectCellContents(html);\n\n    // update a few attributes in the rendered html\n    const vanillaGridElement = document.querySelector('.gm-screen-grid');\n    if (!vanillaGridElement) {\n      return;\n    }\n    const vanillaGridElementStyles = getComputedStyle(vanillaGridElement);\n    const cols = vanillaGridElementStyles.gridTemplateColumns.split(' ');\n    const colWidth = cols[0];\n\n    $(html)\n      .find('.gm-screen-grid')\n      .each((i, gridElement) => {\n        gridElement.style.setProperty('--grid-cell-width', colWidth);\n      });\n\n    // enforce calculated width per cell. this requires a refresh after window dimension changes, though\n    const numericColWidth: number = +colWidth.replace('px', '');\n    $(html)\n      .find('.gm-screen-grid-cell')\n      .each((i, gridElement) => {\n        const columnSpanCount: number = +gridElement.style.getPropertyValue('--column-span-count');\n        const gridElementWidth = numericColWidth * columnSpanCount;\n        gridElement.style.setProperty('width', gridElementWidth.toString() + 'px');\n      });\n\n    return promise;\n  }\n\n  /**\n   * @override\n   */\n  activateListeners(html: JQuery<HTMLElement>) {\n    super.activateListeners(html);\n\n    if (game.user?.isGM) {\n      this._reorderDragDropListeners(html);\n    }\n\n    $('.gm-screen-button').on('contextmenu', () => {\n      const config = new GmScreenSettingsConfig();\n      config.render(true);\n    });\n\n    $(html).on('click', 'button', this.handleClickEvent.bind(this));\n    $(html).on('click', 'a', this.handleClickEvent.bind(this));\n  }\n\n  /**\n   * Handles the ability to re-order tabs if the user is the GM\n   */\n  _reorderDragDropListeners(html: JQuery<any>) {\n    let draggedTab: HTMLElement | undefined;\n    const tabElement = html.find('.gm-screen-tabs');\n\n    tabElement.on('dragstart', '.item', (e) => {\n      draggedTab = e.target;\n    });\n\n    tabElement.on('dragover', (e) => {\n      if (!draggedTab) {\n        return;\n      }\n\n      const children = Array.from($(e.target).closest('.gm-screen-tabs').children());\n\n      if (children.indexOf(e.target) > children.indexOf(draggedTab)) {\n        e.target.after(draggedTab);\n      } else {\n        e.target.before(draggedTab);\n      }\n    });\n\n    tabElement.on('dragend', async (e) => {\n      if (!draggedTab) {\n        return;\n      }\n\n      const newGrids = foundry.utils.deepClone(GmScreen.dataManager.grids);\n\n      // rebuild gmScreenConfig based on the current layout of the tabs\n      $(e.target)\n        .closest('.gm-screen-tabs')\n        .children()\n        .each((index, item) => {\n          const gridId = $(item).attr('data-tab');\n          if (!gridId) {\n            return;\n          }\n          newGrids[gridId] = GmScreen.dataManager.grids[gridId];\n        });\n\n      draggedTab = undefined;\n      await game.settings.set(MODULE_ID, GmScreen.SETTINGS.gmScreenConfig, {\n        activeGridId: GmScreen.dataManager.activeGmGridId,\n        grids: newGrids,\n      });\n    });\n  }\n\n  /**\n   * Handles Common Mouse Events for all types of gm screen\n   */\n  async handleClickEvent(e: JQuery.ClickEvent<HTMLElement, undefined, HTMLElement, HTMLElement>) {\n    e.preventDefault();\n\n    const action = e.currentTarget.dataset.action as ClickAction;\n    const entityUuid: string | undefined = $(e.currentTarget).parents('[data-entity-uuid]')?.data()?.entityUuid;\n    const entryId: string | undefined = $(e.currentTarget).parents('[data-entry-id]')?.data()?.entryId;\n\n    log(false, 'handleClickEvent', {\n      e,\n      action,\n    });\n\n    switch (action) {\n      case ClickAction.clearCell: {\n        if (!entryId) {\n          return;\n        }\n\n        GmScreen.dataManager.removeEntryFromActiveGrid(entryId);\n        break;\n      }\n      case ClickAction.configureCell: {\n        const coordinates = GmScreenApplicationCommon.getGridElementsPosition($(e.target).parent());\n        GmScreenCell._onConfigureGridEntry(coordinates, entryId);\n        break;\n      }\n      case ClickAction.open: {\n        GmScreenCell._onClickOpen(entityUuid);\n        break;\n      }\n      case ClickAction.setActiveGridId: {\n        const newActiveGridId = e.currentTarget.dataset.tab;\n        await GmScreen.dataManager.setActiveGmGridId(newActiveGridId);\n        // this.refresh();\n        break;\n      }\n      case ClickAction.rolltable: {\n        if (!entityUuid || !entryId) {\n          break;\n        }\n        const cellClassInstance = (await this.getCellApplicationClass(entityUuid, entryId)) as CompactRollTableDisplay;\n        await cellClassInstance._rollOnTable();\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  _canDragDrop(): boolean {\n    return !!game.user?.isGM;\n  }\n\n  /**\n   * Handles the dropping of a document onto a grid cell\n   * @override\n   */\n  _onDrop(event: DragEvent): void {\n    event.stopPropagation();\n\n    // do nothing if this user is not the gm\n    if (!game.user?.isGM) return;\n\n    // type safety checks\n    if (!event.currentTarget || !event.target || !event.dataTransfer) return;\n\n    // Try to extract the data\n    let data;\n    try {\n      data = JSON.parse(event.dataTransfer.getData('text/plain'));\n    } catch (err) {\n      return;\n    }\n\n    log(false, 'onDrop', {\n      event,\n      data,\n      closestGridCell: $(event.currentTarget).closest('.gm-screen-grid-cell'),\n    });\n\n    // only move forward if dropped entry is of a supported type\n    if (!['JournalEntry', 'JournalEntryPage', 'RollTable', 'Item', 'Actor'].includes(data.type)) {\n      return;\n    }\n\n    const entityUuid = data.uuid;\n\n    const gridElementPosition = GmScreenApplicationCommon.getGridElementsPosition(\n      $(event.target).closest('.gm-screen-grid-cell'),\n    );\n    const newEntryId = `${gridElementPosition.x}-${gridElementPosition.y}`;\n\n    const newEntry: GmScreenGridEntry = {\n      ...gridElementPosition,\n      entryId: newEntryId,\n      entityUuid,\n    };\n\n    GmScreen.dataManager.addEntryToActiveGrid(newEntry);\n  }\n\n  /**\n   * Injects cell applications during _renderInner;\n   * Handles finding all cells in the html and injecting their rightful contents based on\n   * data attributes which detail the uuid of the document within\n   */\n  injectCellContents(html: JQuery<HTMLElement>) {\n    const allCells = $(html).find('[data-entity-uuid]');\n\n    log(false, 'injectCellContents', allCells);\n\n    allCells.each((index, gridEntry) => {\n      try {\n        // `this` is the parent .gm-screen-grid-cell\n        const relevantUuid = gridEntry.dataset.entityUuid;\n        if (!relevantUuid) {\n          return;\n        }\n        const cellId = `#${gridEntry.id}`;\n\n        log(false, 'gridEntry with uuid defined found', { relevantUuid, cellId, gridEntry });\n\n        this.getCellApplicationClass(relevantUuid, cellId)\n          .then((application) => {\n            log(false, `got application for \"${cellId}\"`, {\n              application,\n            });\n\n            if (!application) {\n              throw new Error('no application exists to render');\n            }\n\n            const classes = application.options.classes.join(' ');\n\n            const gridCellContent = $(gridEntry).find('.gm-screen-grid-cell-content');\n            gridCellContent.addClass(classes);\n\n            // actually render the application\n            application.render(true);\n          })\n          .catch((e) => {\n            log(true, 'error trying to render a gridEntry', {\n              gridEntry,\n              cellId,\n              relevantUuid,\n              error: e,\n            });\n          });\n      } catch (e) {\n        log(false, 'erroring', e, {\n          gridEntry,\n        });\n      }\n    });\n\n    updateCSSPropertyVariable(html, '.gm-screen-grid-cell', 'width', '--this-cell-width');\n\n    return html;\n  }\n\n  /**\n   * create and cache the custom Application when we need to during GmScreenApplication.render();\n   * and then use that cached Application instance to render\n   *\n   * @param documentUuid - Identifier for the Entity in the cell\n   * @param cellId - Identifier for the Cell\n   * @param gridCellContentElement - the element to inject into\n   * @returns the instance of the document's sheet to render\n   */\n  async getCellApplicationClass(documentUuid: string, cellId: string) {\n    const relevantDocument = await GmScreenDataManager.getRelevantGmScreenDocument(documentUuid);\n\n    // if the document does not exist, 'close' the application and destroy the cached copy\n    if (!relevantDocument) {\n      await this.apps[cellId]?.close();\n      delete this.apps[cellId];\n\n      console.warn(\n        'One of the grid cells tried to render a document that does not exist. Perhaps it was deleted or is in a compendium module that is not active?',\n        documentUuid,\n      );\n      return;\n    }\n\n    /* If there is an old app in this cell which does not belong to this document, 'close' that application and destroy its cache entry */\n    if (this.apps[cellId] && this.apps[cellId]?.object.uuid !== documentUuid) {\n      await this.apps[cellId].close();\n      delete this.apps[cellId];\n    }\n\n    // gets the relevant document's GM Screen Sheet class constructor based on any present overrides\n    const SheetClassConstructor = (GmScreenCell._getGridEntrySheetClass(relevantDocument) ??\n      relevantDocument.sheet?.constructor) as ConstructorOf<DocumentSheet> | undefined;\n\n    /* If the currently cached application does not match the sheet class, 'close' that application and destroy its cache entry */\n    if (this.apps[cellId] && this.apps[cellId].constructor.name !== SheetClassConstructor?.name) {\n      await this.apps[cellId].close();\n      delete this.apps[cellId];\n    }\n\n    /* If the currently cached application does match the expected sheet class, return it */\n    if (this.apps[cellId] && this.apps[cellId].constructor.name === SheetClassConstructor?.name) {\n      log(false, `using cached application instance for \"${relevantDocument.name}\"`, {\n        entityUuid: documentUuid,\n        app: this.apps[cellId],\n      });\n\n      return this.apps[cellId];\n    }\n\n    /** Otherwise, we need to make a new instance of the sheet class retrieved */\n    log(false, 'relevantEntity sheet', {\n      sheetClassConstructor: SheetClassConstructor,\n      name: SheetClassConstructor?.name,\n    });\n\n    if (!SheetClassConstructor) {\n      throw new Error('Could not create cell application as the constructor does not exist');\n    }\n\n    // // TODO: FIXME in _getGmScreenSheetClass\n    // if (SheetClassConstructor.name === 'RollTableConfig') {\n    //   log(false, `creating compact rollTableDisplay for \"${relevantDocument.name}\"`, {\n    //     cellId,\n    //   });\n\n    //   this.apps[cellId] = new CompactRollTableDisplay(relevantDocument, { cellId });\n    //   return this.apps[cellId];\n    // }\n\n    log(false, `creating compact generic for \"${relevantDocument.name}\"`, {\n      cellId,\n    });\n\n    const CompactDocumentSheet = new SheetClassConstructor(relevantDocument, {\n      editable: false,\n    }) as GmScreenApp;\n\n    // apply all the right overrides to the sheet class so it renders inside the grid\n    GmScreenCell.applyGmScreenCellSheetOverrides(CompactDocumentSheet, cellId);\n\n    log(false, `created compact generic for \"${relevantDocument.name}\"`, {\n      sheet: CompactDocumentSheet,\n    });\n\n    this.apps[cellId] = CompactDocumentSheet;\n\n    return this.apps[cellId];\n  }\n\n  toggleGmScreenVisibility() {\n    throw new Error('Each GM Screen subclass must implemement this method');\n  }\n\n  /**\n   * Gets the given element's X/Y coordinates in the grid\n   */\n  static getGridElementsPosition(element: JQuery<any>) {\n    const relevantGridElement = element.parents('.gm-screen-grid')[0];\n\n    const vanillaGridElementStyles = window.getComputedStyle(relevantGridElement);\n\n    log(false, 'getGridElementsPosition', {\n      element,\n      relevantGridElement,\n      vanillaGridElementStyles,\n      gap: vanillaGridElementStyles.gap, // wtf this is '' in firefox\n      gridRowGap: vanillaGridElementStyles.rowGap,\n      gridColGap: vanillaGridElementStyles.columnGap,\n    });\n\n    const numberRegex = /([+-]?(?=\\.\\d|\\d)(?:\\d+)?(?:\\.?\\d*))(?:[eE]([+-]?\\d+))?/;\n    const gap = Number(vanillaGridElementStyles.rowGap.match(numberRegex)?.[0]);\n\n    //Get the css attribute grid-template-columns from the css of class grid\n    //split on whitespace and get the length, this will give you the column dimensions\n    const cols = vanillaGridElementStyles.gridTemplateColumns.split(' ');\n    const colWidth = Number(cols[0].match(numberRegex)?.[0]);\n\n    //Get the css attribute grid-template-rows from the css of class grid\n    //split on whitespace and get the length, this will give you the column dimensions\n    const rows = vanillaGridElementStyles.gridTemplateRows.split(' ');\n    const rowHeight = Number(rows[0].match(numberRegex)?.[0]);\n\n    // to figure out which column/row this element is in within the gridElement, we have to do math\n    const elementBounds = element[0].getBoundingClientRect();\n    const gridBounds = relevantGridElement.getBoundingClientRect();\n\n    const elementColumn = Math.floor((elementBounds.left - (gridBounds.left - gap)) / (colWidth + gap)) + 1;\n\n    const elementRow = Math.floor((elementBounds.top - (gridBounds.top - gap)) / (rowHeight + gap)) + 1;\n\n    log(false, 'getGridElementsPosition', {\n      setup: {\n        gap,\n        cols,\n        rows,\n        elementBounds,\n        gridBounds,\n        colWidth,\n        rowHeight,\n      },\n      results: {\n        elementColumn,\n        elementRow,\n      },\n    });\n    //Return an object with properties row and column\n    return { y: elementRow, x: elementColumn };\n  }\n}\n\n/** Extends the base GM Screen Application for the Popout Case */\nexport class GmScreenApplicationPopout extends GmScreenApplicationCommon {\n  static get defaultOptions(): ApplicationOptions {\n    const { columns, rows } = GmScreen.dataManager.applicationData;\n\n    return {\n      ...super.defaultOptions,\n      classes: ['gm-screen-popOut'],\n      popOut: true,\n      width: Number(columns) * 400,\n      height: Number(rows) * 300,\n      resizable: true,\n      title: game.i18n.localize(`${MODULE_ABBREV}.gmScreen.Title`),\n    };\n  }\n\n  /** Handle toggling gm screens */\n  toggleGmScreenVisibility(shouldOpen = !this.rendered) {\n    if (shouldOpen) {\n      if (!this.rendered) {\n        this.render(true);\n      } else {\n        this.bringToTop();\n      }\n    }\n\n    if (!shouldOpen) {\n      this.close();\n    }\n\n    // on open, call MyHooks.openClose with isOpen: true and the active grid details\n    Hooks.callAll(GmScreen.HOOKS.openClose, this, {\n      isOpen: this.rendered,\n      activeGridId: GmScreen.dataManager.activeGmGridId,\n      activeGridName: GmScreen.dataManager.activeGmGrid?.name,\n    });\n  }\n\n  /**\n   * @override\n   */\n  _getHeaderButtons() {\n    const superButtons = super._getHeaderButtons();\n\n    const gmButtons = [\n      {\n        label: game.i18n.localize(`${MODULE_ABBREV}.gmScreen.Reset`),\n        class: 'clear',\n        icon: 'fas fa-ban',\n        onclick: () => GmScreen.dataManager.clearActiveGrid(), // TODO: `this.apps = {};` ?\n      },\n    ];\n\n    return [\n      ...(game.user?.isGM ? gmButtons : []),\n      {\n        label: game.i18n.localize(`${MODULE_ABBREV}.gmScreen.Refresh`),\n        class: 'refresh',\n        icon: 'fas fa-sync',\n        onclick: () => GmScreen.dataManager.refresh.bind(this)(),\n      },\n      ...superButtons,\n    ];\n  }\n}\n\n/** Extends the base GM Screen Application for the Drawer Case */\nexport class GmScreenApplicationDrawer extends GmScreenApplicationCommon {\n  expanded = false;\n\n  static get defaultOptions(): ApplicationOptions {\n    return {\n      ...super.defaultOptions,\n      popOut: false,\n    };\n  }\n\n  getData() {\n    return {\n      ...super.getData(),\n      expanded: this.expanded,\n    };\n  }\n\n  // TODO ??? Still needed ???\n  activateListeners(html: any): void {\n    super.activateListeners(html);\n\n    // bring to top on click\n    $(html).on('mousedown', (event) => {\n      log(false, 'buttons', event.buttons);\n      if (event.buttons === 2) {\n        return;\n      }\n      this.bringToTop();\n    });\n  }\n\n  /**\n   * Set the GM Screen Visibility. By default will toggle the current state.\n   * @param {boolean} expanded\n   */\n  toggleGmScreenVisibility(expanded = !this.expanded) {\n    // TODO: Allow toggling open to a specific tab\n    // TODO: Provide API for other modules to know what tabs exist\n    this.expanded = expanded;\n\n    const activeGridDetails = {\n      activeGridId: GmScreen.dataManager.activeGmGridId,\n      activeGridName: GmScreen.dataManager.activeGmGrid?.name,\n    };\n\n    if (this.expanded) {\n      ui.windows[this.appId] = this; // add our window to the stack, pretending we are an open Application\n\n      this.bringToTop();\n\n      $('.gm-screen-app').addClass('expanded');\n\n      // on open, call MyHooks.openClose with isOpen: true and the active grid details\n      Hooks.callAll(GmScreen.HOOKS.openClose, this, {\n        isOpen: true,\n        ...activeGridDetails,\n      });\n    } else {\n      $('.gm-screen-app').removeClass('expanded');\n      delete ui.windows[this.appId]; // remove our window to the stack, pretending we are a closed Application\n\n      // on open, call MyHooks.openClose with isOpen: false and the active grid details\n      Hooks.callAll(GmScreen.HOOKS.openClose, this, {\n        isOpen: false,\n        ...activeGridDetails,\n      });\n    }\n  }\n\n  async handleClickEvent(e: JQuery.ClickEvent<HTMLElement, undefined, HTMLElement, HTMLElement>) {\n    super.handleClickEvent(e);\n\n    const action = e.currentTarget.dataset.action as ClickAction;\n    switch (action) {\n      case ClickAction.clearGrid: {\n        GmScreen.dataManager.clearActiveGrid();\n        break;\n      }\n      case ClickAction.refresh: {\n        GmScreen.dataManager.refresh();\n        break;\n      }\n      case ClickAction['toggle-gm-screen']: {\n        try {\n          this.toggleGmScreenVisibility();\n        } catch (error) {\n          log(true, 'error toggling GM Screen', error);\n        }\n        break;\n      }\n    }\n  }\n}\n","import { GmScreenApi, GmScreenSettingsData, MyFlags, MyHooks, MySettings } from '../../types';\nimport { debouncedReload, log } from '../helpers';\nimport { GmScreenSettingsConfig } from './GmScreenSettingsConfig';\nimport { defaultGmScreenData, GmScreenDataManager } from './GmScreenData';\nimport { GmScreenApplicationCommon, GmScreenApplicationDrawer, GmScreenApplicationPopout } from './GmScreenApplication';\nimport { MODULE_ID, MODULE_ABBREV } from '../constants';\n\nexport class GmScreen {\n  static _dataManager?: GmScreenDataManager;\n  static _gmScreenApp?: GmScreenApplicationCommon;\n\n  static TEMPLATES = {\n    settings: `modules/${MODULE_ID}/templates/settings.hbs`,\n    screen: `modules/${MODULE_ID}/templates/screen.hbs`,\n    screenCell: `modules/${MODULE_ID}/templates/parts/screen-cell.hbs`,\n    screenGrid: `modules/${MODULE_ID}/templates/parts/screen-grid.hbs`,\n    compactRollTable: `modules/${MODULE_ID}/templates/parts/compact-roll-table.hbs`,\n    compactJournalEntry: `modules/${MODULE_ID}/templates/parts/compact-journal-entry.hbs`,\n    entitySheetInjection: `modules/${MODULE_ID}/templates/parts/entity-sheet-injection.hbs`,\n    grids: {\n      tableRow: `modules/${MODULE_ID}/templates/parts/settings-grid-config-table-row.hbs`,\n    },\n  };\n\n  static HOOKS = MyHooks;\n\n  static SETTINGS = MySettings;\n\n  static FLAGS = MyFlags;\n\n  /**\n   * handle the init hook\n   * Register all settings needed for GM Screen Initialization\n   * */\n  static init() {\n    this.registerSettings();\n    this.preloadTemplates();\n  }\n\n  /**\n   * Handle Ready hook\n   * Render the drawer mode screen\n   * put the module api into the moduledata\n   */\n  static ready() {\n    // Do anything once the module is ready\n    if (this.dataManager.drawerMode) {\n      log(false, 'readying', { drawerMode: this.dataManager.drawerMode, app: this.gmScreenApp });\n      this.gmScreenApp.render(true);\n    }\n\n    const gmScreenModuleData = game.modules.get(MODULE_ID);\n\n    if (gmScreenModuleData) {\n      gmScreenModuleData.api = this.gmScreenApi;\n    }\n\n    if (game.user?.isGM) {\n      game.settings.set(MODULE_ID, this.SETTINGS.reset, false);\n    }\n    Hooks.callAll(this.HOOKS.ready);\n  }\n\n  /**\n   * Get or Create a new instance of GmScreenDataManager and cache it\n   */\n  static get dataManager() {\n    if (!this._dataManager) {\n      this._dataManager = new GmScreenDataManager();\n    }\n\n    return this._dataManager;\n  }\n\n  /**\n   * Get or Create a new instance of GmScreenDataManager and cache it\n   */\n  static get gmScreenApp() {\n    // TOOD: Is this the best play with a drawer-mode setting that can change?\n    if (!this._gmScreenApp) {\n      this._gmScreenApp = this.dataManager.drawerMode\n        ? new GmScreenApplicationDrawer()\n        : new GmScreenApplicationPopout();\n    }\n\n    return this._gmScreenApp;\n  }\n\n  /**\n   * Get the public api for the gm screen\n   */\n  static get gmScreenApi(): GmScreenApi {\n    return {\n      toggleGmScreenVisibility: this.gmScreenApp.toggleGmScreenVisibility,\n      refreshGmScreen: this.dataManager.refresh,\n    };\n  }\n\n  /** Asynchronously preload templates */\n  static async preloadTemplates() {\n    return loadTemplates(Object.values(flattenObject(this.TEMPLATES)));\n  }\n\n  /** Register all settings needed for GM Screen Initialization */\n  static registerSettings() {\n    game.settings.registerMenu(MODULE_ID, 'menu', {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.gmScreenConfig}.Name`,\n      label: `${MODULE_ABBREV}.settings.${this.SETTINGS.gmScreenConfig}.Label`,\n      icon: 'fas fa-table',\n      type: GmScreenSettingsConfig,\n      restricted: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.gmScreenConfig}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.gmScreenConfig, {\n      default: defaultGmScreenData,\n      type: defaultGmScreenData.constructor as ConstructorOf<GmScreenSettingsData>,\n      scope: 'world',\n      config: false,\n      onChange: () => {\n        game.modules.get(MODULE_ID)?.api?.refreshGmScreen();\n      },\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.migrated, {\n      config: false,\n      default: { status: false, version: '1.2.2' },\n      scope: 'world',\n      type: Object as unknown as ConstructorOf<{ status: boolean; version: string }>,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.columns, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.columns}.Name`,\n      default: 4,\n      type: Number,\n      scope: 'world',\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.columns}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.rows, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.rows}.Name`,\n      default: 3,\n      type: Number,\n      scope: 'world',\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.rows}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.displayDrawer, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.displayDrawer}.Name`,\n      default: true,\n      type: Boolean,\n      scope: 'client',\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.displayDrawer}.Hint`,\n      onChange: debouncedReload,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.rightMargin, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.rightMargin}.Name`,\n      default: 0,\n      type: Number,\n      scope: 'client',\n      range: { min: 0, max: 75, step: 5 },\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.rightMargin}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.drawerWidth, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerWidth}.Name`,\n      default: 100,\n      type: Number,\n      scope: 'client',\n      range: { min: 25, max: 100, step: 1 },\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerWidth}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.drawerHeight, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerHeight}.Name`,\n      default: 60,\n      type: Number,\n      scope: 'client',\n      range: { min: 10, max: 90, step: 1 },\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerHeight}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.drawerOpacity, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerOpacity}.Name`,\n      default: 1,\n      type: Number,\n      scope: 'client',\n      range: { min: 0.1, max: 1, step: 0.05 },\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.drawerOpacity}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.condensedButton, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.condensedButton}.Name`,\n      default: false,\n      type: Boolean,\n      scope: 'client',\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.condensedButton}.Hint`,\n    });\n\n    game.settings.register(MODULE_ID, this.SETTINGS.reset, {\n      name: `${MODULE_ABBREV}.settings.${this.SETTINGS.reset}.Name`,\n      default: false,\n      type: Boolean,\n      scope: 'world',\n      config: true,\n      hint: `${MODULE_ABBREV}.settings.${this.SETTINGS.reset}.Hint`,\n      onChange: (selected) => {\n        if (selected) {\n          game.settings.set(MODULE_ID, this.SETTINGS.gmScreenConfig, defaultGmScreenData);\n        }\n      },\n    });\n  }\n}\n","import { GmScreen } from './classes/GmScreen';\nimport { MODULE_ABBREV, MODULE_ID } from './constants';\nimport { log } from './helpers';\n\n// Initialize module\nHooks.once('init', async () => {\n  console.log('gm-screen | Initializing GM Screen');\n\n  GmScreen.init();\n});\n\n// When ready\nHooks.once('ready', async () => {\n  GmScreen.ready();\n});\n\nHooks.once('devModeReady', ({ registerPackageDebugFlag }) => {\n  registerPackageDebugFlag(MODULE_ID);\n});\n\n/* Entity Sheet Override */\n\nHooks.on('renderDocumentSheetConfig', async (app: any, html: any, data: any) => {\n  if (!game.user?.isGM) {\n    return;\n  }\n\n  const htmlToInject = await renderTemplate(GmScreen.TEMPLATES['entitySheetInjection'], {\n    ...data,\n    gmScreenSheetClass: app.object.getFlag(MODULE_ID, 'gmScreenSheetClass'),\n  });\n\n  log(false, 'rendering entity sheet config', {\n    htmlToInject,\n    target: html.find('[name=submit]'),\n    current: app.object.getFlag(MODULE_ID, 'gmScreenSheetClass'),\n  });\n\n  html.find('[name=submit]').before(htmlToInject);\n\n  html.on('change', 'select[name=gmScreenSheetClass]', (event: any) => {\n    log(false, 'custom change listener firing', {\n      event,\n      value: event.target.value,\n    });\n    app.object.setFlag(MODULE_ID, 'gmScreenSheetClass', event.target.value);\n  });\n\n  app.setPosition({ height: 'auto' });\n});\n\n/**\n * Hacky way to ensure our drawer stays in the right place as the sidebar collapses and uncollapses\n */\nHooks.on('collapseSidebar', () => {\n  const uiRight = document.querySelector('#ui-right');\n  if (!uiRight) {\n    return;\n  }\n\n  const uiRightStyles = getComputedStyle(uiRight);\n\n  document.querySelector('body')?.style.setProperty('--gm-screen-ui-right-width', uiRightStyles.width);\n});\n\n/***************************/\n// HANDLEBARS HELPERS\n\nHandlebars.registerHelper(`${MODULE_ABBREV}-path`, (relativePath: string) => {\n  return `modules/${MODULE_ID}/${relativePath}`;\n});\n\n/*\n * https://stackoverflow.com/questions/53398408/switch-case-with-default-in-handlebars-js\n * {{#switch 'a'}}\n *   {{#case 'a'}} A {{/case}}\n *   {{#case 'b'}} B {{/case}}\n * {{/switch}}\n */\nHandlebars.registerHelper(`${MODULE_ABBREV}-switch`, function (value, options) {\n  //@ts-expect-error handlebars things\n  this.switch_value = value;\n  //@ts-expect-error handlebars things\n  return options.fn(this);\n});\n\nHandlebars.registerHelper(`${MODULE_ABBREV}-case`, function (value, options) {\n  //@ts-expect-error handlebars things\n  if (value == this.switch_value) {\n    //@ts-expect-error handlebars things\n    return options.fn(this);\n  }\n});\n\nHandlebars.registerHelper(`${MODULE_ABBREV}-enrich`, function (str) {\n  return TextEditor.enrichHTML(str);\n});\n"],"names":["MySettings","MyHooks"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}